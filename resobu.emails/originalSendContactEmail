import json
import textwrap
import boto3
from botocore.exceptions import ClientError


def lambda_handler(event, context):
    userattributeslist = ["given_name", "family_name", "email",
                          "custom:company", "custom:affiliation",
                          "custom:country", "custom:zip_code",
                          "custom:devices_used", "custom:department"]
    try:
        ## setting function variables
        # lastname = event["lastname"]
        # firstname = event["firstname"]
        # company = event['company']
        # department = event["department"]
        # workemail = event["workemail"]
        # affiliation = event["affiliation"]
        # country = event["country"]
        # zipcode = event["zipcode"]
        # devices = event["devices"]
        accesstoken = event["accessToken"]
        message_header = event['subject']
        message_body = event['body']

    except KeyError as e:
        raise Exception({
            "errorType": "Exception",
            "httpStatus": 500,
            "message": "Required function parameters are not present {}".format(e)
        })

    # identity information
    try:
        # Create new cognito idp resource
        print("Starting IDP information requests...")
        idp = boto3.client('cognito-idp')
        idp_response = idp.get_user(AccessToken=accesstoken)
        print(idp_response["UserAttributes"])

        userattributes = {}
        for attrib in userattributeslist:
            try:
                userattributes[attrib] = \
                [kvpair_obj["Value"] for kvpair_obj in idp_response["UserAttributes"] if kvpair_obj["Name"] == attrib][
                    0]
            except IndexError as e:
                userattributes[attrib] = ""
                print("Warn: no " + userattributes[(attrib)])
            else:
                print("...got: " + userattributes[attrib])

    except ClientError as e:
        message = "Failed! Requested: " + accesstoken + " IDP Response" + e.response['Error']['Message']
        print(message)
        raise Exception({
            "errorType": "Exception",
            "httpStatus": 500,
            "message": message
        })
    else:
        # for userattrib, value in userattributes.items(): print("...got userattributes[\""+userattrib+"\"]: "+value)
        print("...got", userattributes)
        print("Success: IDP identity info")

        # set intermediate variables for convenience
        lastname = userattributes["family_name"]
        firstname = userattributes["given_name"]
        company = userattributes["custom:company"]
        department = userattributes["custom:department"]
        workemail = userattributes["email"]
        affiliation = userattributes["custom:affiliation"]
        country = userattributes["custom:country"]
        zipcode = userattributes["custom:zip_code"]
        devices = userattributes["custom:devices_used"]

    # debug information
    DEBUG = (f"Request ID: {context.aws_request_id} \r\n"
             f"Mem. limits(MB): {context.memory_limit_in_mb} \r\n"
             f"LambdaContext vars : {vars(context)} \r\n"
             f"cognito_identity_id: {context.identity.cognito_identity_id} "
             )

    print(DEBUG)

    # function mail settings
    # AWS SES region (not all available)
    AWS_SES_REGION = "eu-west-1"
    # The character encoding for the email.
    CHARSET = "UTF-8"

    # function s3 settings
    # AWS S3 region
    AWS_S3_REGION = "eu-central-1"

    # from email address. This address must be verified with Amazon SES.
    SENDER = "NanoTemper NT.Cloud <nt.cloud@nanotempertech.com>"
    # to email address
    RECIPIENT = "nt.cloud@nanotempertech.com"
    # The subject line for the email.
    SUBJECT = "NT.Cloud: Feedback from %s" % firstname

    # Also add text wrapping here to mimic what the user typed in
    # (if the box size changes the character length must too!)
    # message_body_html = message_body.replace('\n','</br>')
    # message_body_html = '\n'.join(textwrap.wrap(message_body_html, 100))

    # The email body for recipients with non-HTML email clients.
    BODY_TEXT = ("A user has feedback for the NT.Cloud\r\n"
                 "User info:\r\n"
                 f"First Name: {firstname} \r\n"
                 f"Last Name: {lastname} \r\n"
                 f"Company: {company} \r\n"
                 f"Department: {department}\r\n"
                 f"Email: {workemail}\r\n"
                 f"Affiliation: {affiliation}\r\n"
                 f"Country: {country}\r\n"
                 f"Zip code: {zipcode}\r\n"
                 f"Products: {devices}\r\n\r\n"
                 f"Subject: {message_header} \r\n"
                 "Feedback:\r\n"
                 f"{message_body} \r\n"
                 )

    # The HTML body of the email. Change out newlines for html line breaks
    message_body_html = message_body.replace('\n', '</br>')
    # message_body_html = message_body_html.replace('\n','</br>')
    BODY_HTML = """
                <html>
                <head></head>
                <body>
                <h1>A user has feedback for the NT.Cloud</h1>
                <p>User info:</p>
                <p><b>First Name:</b> %s</br>
                <b>Last Name:</b> %s</br>
                <b>Company:</b> %s</br>
                <b>Department:</b> %s</br>
                <b>Email:</b> %s</br>
                <b>Affiliation:</b> %s</br>
                <b>Country:</b> %s</br>
                <b>Zip code:</b> %s</br>
                <b>Products:</b> %s</br></br>
                <b>Subject:</b> %s</br></br>
                <b>Feedback:</b></br></br>
                %s
                </br></br>
                </body>
                </html>
                """ % (
    firstname, lastname, company, department, workemail, affiliation, country, zipcode, devices, message_header,
    message_body_html)

    #
    # Mail Notification
    #
    # catch mail client exceptions
    try:
        print("Starting SES mail send...")
        # Create a new SES resource and specify a region.
        ses = boto3.client('ses', region_name=AWS_SES_REGION)
        # Provide the contents of the email.
        ses_response = ses.send_email(
            Destination={
                'ToAddresses': [
                    RECIPIENT,
                ],
            },
            Message={
                'Body': {
                    'Html': {
                        'Charset': CHARSET,
                        'Data': BODY_HTML,
                    },
                    'Text': {
                        'Charset': CHARSET,
                        'Data': BODY_TEXT,
                    },
                },
                'Subject': {
                    'Charset': CHARSET,
                    'Data': SUBJECT,
                },
            },
            Source=SENDER
        )
    except ClientError as e:
        message = "Failed: " + " SES Response" + e.response['Error']['Message']
        print(message)
        raise Exception({
            "errorType": "Exception",
            "httpStatus": 500,
            "message": message
        })

