import resobuTableFunctions as rtf
from pprint import pprint
import json

if __name__ == '__main__':
    # # test to fetch the People List
    context = None
    # body = {'request_type': "read_people", 'user_sub_id': "1", 'group_type': 'Business'}
    # body = {'request_type': "read_chat_parent", 'user_sub_id': "3", 'group_type': 'Business'}
    body = {'request_type': "read_activated_chat_parents", 'user_sub_id': "3", 'group_type': 'Business'}

    # # test to put an item
    # body = {'request_type': "create_people", 'user_sub_id': "1", 'group_type': 'Business', 'emails': ["123@test.com"],
    #        'person_info': {'teamColleagues': [], 'projectColleagues': [], 'connectedColleagues': []}}

    # body = {'request_type': "create_chat_parent", 'user_sub_id': "1", 'group_type': 'Business',
    #           "chat_info": {'chatActivation': "True", 'nextChats': ['2021-01-02','2021-01-03','2021-01-01'],
    #           'frequency': 'monthly', 'startDate': "2021-01-01", 'endDate': "2033-01-01", 'chatLength': '30',
    #                         'weekday': 'friday', 'ChatTime': '11:30', 'weekOfMonth': 'last',
    #                         'inviteText': '<p>Hello $NAME$,</p><p><br></p><p>your next <strong>Remote Chat</strong>',
    #                          'todoList': {'enteredEmails': False, 'personalisedInvite': False, 'scheduledMeeting': False,
    #                                       'choseMeetingTime': False, 'activated': False},
    #                         'chatSize': '2'}
    #           }

    # # test to update an existing item updateRow
    # body = {'request_type': "update_person", 'user_sub_id': "1", 'group_type': 'Business', 'email': '1@test.com',
    #        'changes': {'projectColleagues': ['44@test.com'], 'teamColleagues': ['333@test.com']}}
    # body = {'request_type': "update_chat_parent", 'user_sub_id': "3", 'group_type': 'Business',
    #         'changes': {"chat_info": {'chatActivation': False, 'nextChats': ['2021-01-02','2021-01-03','2021-01-01'],
    #                                   'frequency': 'always', 'startDate': "2021-01-01", 'endDate': "2033-01-01", 'chatLength': '30',
    #                                   'weekday': 'friday', 'time': '11:30', 'weekOfMonth': 'last',
    #                                   'inviteText': '<p>Hello $NAME$,</p><p><br></p><p>your next <strong>Remote Chat</strong>',
    #                                   'todoList': {'enteredEmails': False, 'personalisedInvite': False, 'scheduledMeeting': False,
    #                                                'choseMeetingTime': False, 'activated': False},
    #                                   'chatSize': '10'}
    #          }}
    # body = {'request_type': "update_chat_parent_activation", 'user_sub_id': "3", 'group_type': 'Business', "activated": True,
    #        "next_chat": '2021-01-01', "newActivation": False}

    # # test to delete an existing item
    # body = {'request_type': "delete_person", 'user_sub_id': "3", 'group_type': 'Business', 'email': "33@test.com"}
    # body = {'request_type': "delete_chat_parent", 'user_sub_id': "3", 'group_type': 'Business'}

    lambdaResponse = rtf.handler(body, context)
    print("Got following response:")
    pprint(lambdaResponse, sort_dicts=False)
    #body = "{'request_type': 'read_people', 'user_sub_id': '3', 'group_type': 'Business'}"


